package db

import (
	"encoding/json"
	"testing"

	"github.com/aquasecurity/trivy-db/pkg/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestConfig_GetVulnerabilityDetail(t *testing.T) {
	olddbcForEachFunc := dbcForEach
	defer func() {
		dbcForEach = olddbcForEachFunc
	}()

	dbcForEach = func(rootBucket, nestedBucket string) (value map[string][]byte, err error) {

		v, _ := json.Marshal(types.VulnerabilityDetail{
			ID:          "CVE-2020-1234",
			CvssScore:   4.3,
			CvssScoreV3: 5.6,
			Severity:    types.SeverityHigh,
			SeverityV3:  types.SeverityCritical,
			VendorSeverity: types.VendorSeverity{
				"redhat": types.SeverityLow,
			},
			Title:       "test vulnerability",
			Description: "a test vulnerability where vendor rates it lower than NVD",
		})

		return map[string][]byte{
			"CVE-2020-1234": v,
		}, nil
	}

	vd, err := Config{}.GetVulnerabilityDetail("CVE-2020-1234")
	require.NoError(t, err)
	assert.Equal(t, map[string]types.VulnerabilityDetail{
		"CVE-2020-1234": {
			ID:          "CVE-2020-1234",
			CvssScore:   4.3,
			CvssScoreV3: 5.6,
			Severity:    types.SeverityHigh,
			SeverityV3:  types.SeverityCritical,
			VendorSeverity: types.VendorSeverity{
				"redhat": types.SeverityLow,
			},
			Title:       "test vulnerability",
			Description: "a test vulnerability where vendor rates it lower than NVD",
		},
	}, vd)
}
