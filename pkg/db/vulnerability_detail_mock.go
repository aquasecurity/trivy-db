package db

import (
	"github.com/aquasecurity/trivy-db/pkg/types"
	"github.com/etcd-io/bbolt"
	bolt "github.com/etcd-io/bbolt"
	"github.com/stretchr/testify/mock"
)

type PutVulnerabilityDetailArgs struct {
	Tx                      *bbolt.Tx
	TxAnything              bool
	VulnerabilityID         string
	VulnerabilityIDAnything bool
	Source                  string
	SourceAnything          bool
	Vulnerability           types.VulnerabilityDetail
	VulnerabilityAnything   bool
}

type PutVulnerabilityDetailReturns struct {
	Err error
}

type PutVulnerabilityDetailExpectation struct {
	Args    PutVulnerabilityDetailArgs
	Returns PutVulnerabilityDetailReturns
}

func (_m *MockDBConfig) ApplyPutVulnerabilityDetailExpectation(e PutVulnerabilityDetailExpectation) {
	var args []interface{}
	if e.Args.TxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Tx)
	}
	if e.Args.VulnerabilityIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.VulnerabilityID)
	}
	if e.Args.SourceAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Source)
	}
	if e.Args.VulnerabilityAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Vulnerability)
	}
	_m.On("PutVulnerabilityDetail", args...).Return(e.Returns.Err)
}

func (_m *MockDBConfig) ApplyPutVulnerabilityDetailExpectations(expectations []PutVulnerabilityDetailExpectation) {
	for _, e := range expectations {
		_m.ApplyPutVulnerabilityDetailExpectation(e)
	}
}

func (_m *MockDBConfig) PutVulnerabilityDetail(a *bolt.Tx, b, c string, d types.VulnerabilityDetail) error {
	ret := _m.Called(a, b, c, d)
	return ret.Error(0)
}

func (_m *MockDBConfig) GetVulnerabilityDetail(a string) (map[string]types.VulnerabilityDetail, error) {
	ret := _m.Called(a)
	ret0 := ret.Get(0)
	if ret0 == nil {
		return nil, ret.Error(1)
	}
	r, ok := ret0.(map[string]types.VulnerabilityDetail)
	if !ok {
		return nil, ret.Error(1)
	}
	return r, ret.Error(1)
}

func (_m *MockDBConfig) DeleteVulnerabilityDetailBucket() error {
	ret := _m.Called()
	return ret.Error(0)
}
