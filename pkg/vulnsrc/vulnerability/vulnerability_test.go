package vulnerability

import (
	"errors"
	"testing"

	"github.com/aquasecurity/trivy/pkg/vulnsrc/vulnerability"

	"github.com/aquasecurity/trivy-db/pkg/types"

	"github.com/stretchr/testify/assert"
)

func TestGetDetail(t *testing.T) {
	testCases := []struct {
		name                       string
		getVulnerabilityDetailFunc func(cveID string) (m map[string]types.VulnerabilityDetail, err error)
		expectedSeverity           types.Severity
		expectedVendorSeverity     types.VendorSeverity
		expectedTitle              string
		expectedDescription        string
		expectedRefs               []string
	}{
		{
			name: "happy path, classifications for redhat, ubuntu and nodejs with variety of scores",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{
					vulnerability.RedHat: {
						ID:          "CVE-2020-1234",
						CvssScoreV3: 5.6,
						SeverityV3:  types.SeverityCritical,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
						References:  []string{"http://foo-bar.com/baz"},
					},
					vulnerability.Ubuntu: {
						ID:          "CVE-2020-1234",
						CvssScore:   1.2,
						CvssScoreV3: 3.4,
						Severity:    types.SeverityLow,
						SeverityV3:  types.SeverityMedium,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					vulnerability.NodejsSecurityWg: {
						ID:          "CVE-2020-1234",
						CvssScore:   -1,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					vulnerability.RustSec: {
						ID:          "CVE-2020-1234",
						CvssScore:   9.1,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
				}, nil
			},
			expectedSeverity:       types.SeverityMedium,
			expectedVendorSeverity: types.VendorSeverity{"redhat": 4, "ubuntu": 1, "rust-advisory-db": 4},
			expectedTitle:          "test vulnerability",
			expectedDescription:    "a test vulnerability where vendor rates it lower than NVD",
			expectedRefs:           []string{"http://foo-bar.com/baz"},
		},
		{
			name: "happy path, classifications for redhat (only CVSSv3), ubuntu and nodejs with variety of scores",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{
					vulnerability.RedHat: {
						ID:          "CVE-2020-1234",
						CvssScoreV3: 5.6,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					vulnerability.Ubuntu: {
						ID:          "CVE-2020-1234",
						CvssScore:   1.2,
						CvssScoreV3: 3.4,
						Severity:    types.SeverityLow,
						SeverityV3:  types.SeverityMedium,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					vulnerability.NodejsSecurityWg: {
						ID:          "CVE-2020-1234",
						CvssScore:   9.1,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
				}, nil
			},
			expectedSeverity:       types.SeverityMedium,
			expectedVendorSeverity: types.VendorSeverity{"redhat": 2, "ubuntu": 1, "nodejs-security-wg": 4},
			expectedTitle:          "test vulnerability",
			expectedDescription:    "a test vulnerability where vendor rates it lower than NVD",
		},
		{
			name: "sad path, getVulnerabilityDetailFunc returns an error",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{}, errors.New("unable to get vulnerability detail")
			},
			expectedSeverity: types.SeverityUnknown,
		},
	}

	for _, tc := range testCases {
		oldGetVulnerabilityDetailFunc := getVulnerabilityDetailFunc
		defer func() {
			getVulnerabilityDetailFunc = oldGetVulnerabilityDetailFunc
		}()
		getVulnerabilityDetailFunc = tc.getVulnerabilityDetailFunc

		gotSeverity, gotVendorSeverity, gotTitle, gotDescription, gotRefs := GetDetail("CVE-2020-123")
		assert.Equal(t, tc.expectedSeverity, gotSeverity, tc.name)
		assert.Equal(t, tc.expectedVendorSeverity, gotVendorSeverity, tc.name)
		assert.Equal(t, tc.expectedTitle, gotTitle, tc.name)
		assert.Equal(t, tc.expectedDescription, gotDescription, tc.name)
		assert.Equal(t, tc.expectedRefs, gotRefs, tc.name)
	}

}
