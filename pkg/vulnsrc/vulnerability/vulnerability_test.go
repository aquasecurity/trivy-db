package vulnerability

import (
	"testing"
	"time"

	"golang.org/x/xerrors"

	"github.com/aquasecurity/trivy-db/pkg/db"

	"github.com/aquasecurity/trivy-db/pkg/types"
	"github.com/stretchr/testify/assert"
)

func TestGetDetails(t *testing.T) {
	testCases := []struct {
		name                              string
		getVulnerabilityDetailExpectation db.OperationGetVulnerabilityDetailExpectation
		want                              map[string]types.VulnerabilityDetail
	}{
		{
			name: "happy path",
			getVulnerabilityDetailExpectation: db.OperationGetVulnerabilityDetailExpectation{
				Args: db.OperationGetVulnerabilityDetailArgs{
					CveID: "CVE-2020-1234",
				},
				Returns: db.OperationGetVulnerabilityDetailReturns{
					Detail: map[string]types.VulnerabilityDetail{
						Nvd: {
							CvssScore:        4.2,
							CvssVector:       "AV:N/AC:M/Au:N/C:N/I:P/A:N",
							CvssScoreV3:      5.6,
							CvssVectorV3:     "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
							SeverityV3:       types.SeverityMedium,
							CweIDs:           []string{"CWE-125", "CWE-200"},
							LastModifiedDate: time.Date(2020, 01, 01, 01, 01, 01, 01, time.UTC),
							PublishedDate:    time.Date(2001, 01, 01, 01, 01, 01, 01, time.UTC),
						},
						RedHat: {
							CvssScoreV3:  6.7,
							CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
							SeverityV3:   types.SeverityHigh,
							Title:        "test vulnerability",
							Description:  "a test vulnerability where vendor rates it lower than NVD",
							References:   []string{"http://foo-bar.com/baz"},
						},
					},
				},
			},
			want: map[string]types.VulnerabilityDetail{
				Nvd: {
					CvssScore:        4.2,
					CvssVector:       "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					CvssScoreV3:      5.6,
					CvssVectorV3:     "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:       types.SeverityMedium,
					CweIDs:           []string{"CWE-125", "CWE-200"},
					LastModifiedDate: time.Date(2020, 01, 01, 01, 01, 01, 01, time.UTC),
					PublishedDate:    time.Date(2001, 01, 01, 01, 01, 01, 01, time.UTC),
				},
				RedHat: {
					CvssScoreV3:  6.7,
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:   types.SeverityHigh,
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
					References:   []string{"http://foo-bar.com/baz"},
				},
			},
		},
		{
			name: "sad path",
			getVulnerabilityDetailExpectation: db.OperationGetVulnerabilityDetailExpectation{
				Args: db.OperationGetVulnerabilityDetailArgs{
					CveID: "CVE-2020-1234",
				},
				Returns: db.OperationGetVulnerabilityDetailReturns{
					Err: xerrors.New("unknown error"),
				},
			},
		},
		{
			name: "no detail",
			getVulnerabilityDetailExpectation: db.OperationGetVulnerabilityDetailExpectation{
				Args: db.OperationGetVulnerabilityDetailArgs{
					CveID: "CVE-2020-1234",
				},
				Returns: db.OperationGetVulnerabilityDetailReturns{
					Detail: map[string]types.VulnerabilityDetail{},
				},
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			mockDBOperation := new(db.MockOperation)
			mockDBOperation.ApplyGetVulnerabilityDetailExpectation(tc.getVulnerabilityDetailExpectation)

			v := New(mockDBOperation)
			got := v.GetDetails("CVE-2020-1234")
			assert.Equal(t, tc.want, got)
		})
	}
}

func TestIsRejected(t *testing.T) {
	testCases := []struct {
		name    string
		details map[string]types.VulnerabilityDetail
		want    bool
	}{
		{
			name: "happy path",
			details: map[string]types.VulnerabilityDetail{
				Nvd: {
					ID:          "CVE-2020-1234",
					CvssScore:   9.1,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				RedHat: {
					ID:          "CVE-2020-1234",
					CvssScoreV3: 5.6,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: false,
		},
		{
			name: "happy path, when vulnerability from redhat and ubuntu is rejected by Nvd",
			details: map[string]types.VulnerabilityDetail{
				RedHat: {
					ID:          "CVE-2020-1234",
					CvssScoreV3: 5.6,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				Ubuntu: {
					ID:          "CVE-2020-1234",
					CvssScore:   1.2,
					CvssScoreV3: 3.4,
					Severity:    types.SeverityLow,
					SeverityV3:  types.SeverityMedium,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				Nvd: {
					ID:          "CVE-2020-1234",
					CvssScore:   9.1,
					Title:       "test vulnerability",
					Description: "** REJECT ** a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := New(nil).IsRejected(tc.details)
			assert.Equal(t, tc.want, got)
		})
	}
}

func TestNormalize(t *testing.T) {
	testCases := []struct {
		name    string
		details map[string]types.VulnerabilityDetail
		want    types.Vulnerability
	}{
		{
			name: "happy path",
			details: map[string]types.VulnerabilityDetail{
				Nvd: {
					CvssScore:        4.2,
					CvssVector:       "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					CvssScoreV3:      5.6,
					CvssVectorV3:     "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:       types.SeverityMedium,
					CweIDs:           []string{"CWE-125", "CWE-200"},
					LastModifiedDate: time.Date(2020, 01, 01, 01, 01, 01, 01, time.UTC),
					PublishedDate:    time.Date(2001, 01, 01, 01, 01, 01, 01, time.UTC),
				},
				RedHat: {
					CvssScoreV3:  6.7,
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:   types.SeverityHigh,
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
					References:   []string{"http://foo-bar.com/baz"},
				},
			},
			want: types.Vulnerability{
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"nvd": 2, "redhat": 3},
				VendorVectors: types.VendorVectors{
					Nvd: types.CVSSVector{
						V2: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3: "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
					RedHat: types.CVSSVector{
						V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
				},
				CVSS: types.VendorCVSS{
					Nvd: types.CVSS{
						V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3Vector: "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V2Score:  4.2,
						V3Score:  5.6,
					},
					RedHat: types.CVSS{
						V2Vector: "",
						V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V2Score:  0,
						V3Score:  6.7,
					},
				},
				CweIDs:           []string{"CWE-125", "CWE-200"},
				References:       []string{"http://foo-bar.com/baz"},
				LastModifiedDate: time.Date(2020, 01, 01, 01, 01, 01, 01, time.UTC),
				PublishedDate:    time.Date(2001, 01, 01, 01, 01, 01, 01, time.UTC),
			},
		},
		{
			name: "happy path, classifications for redhat, ubuntu and nodejs with variety of scores and vectors",
			details: map[string]types.VulnerabilityDetail{
				RedHat: {
					ID:           "CVE-2020-1234",
					CvssScore:    4.2,
					CvssVector:   "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					CvssScoreV3:  5.6,
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:   types.SeverityCritical,
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
					References:   []string{"http://foo-bar.com/baz"},
				},
				Ubuntu: {
					ID:           "CVE-2020-1234",
					CvssScoreV3:  3.4,
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					Severity:     types.SeverityLow,
					SeverityV3:   types.SeverityMedium,
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
				},
				NodejsSecurityWg: {
					ID:          "CVE-2020-1234",
					CvssScore:   -1,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				RustSec: {
					ID:          "CVE-2020-1234",
					CvssScore:   9.1,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: types.Vulnerability{
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"redhat": 4, "ubuntu": 1, "rust-advisory-db": 4},
				VendorVectors: types.VendorVectors{
					RedHat: types.CVSSVector{
						V2: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
					Ubuntu: types.CVSSVector{
						V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
				},
				CVSS: types.VendorCVSS{
					RedHat: types.CVSS{
						V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V2Score:  4.2,
						V3Score:  5.6,
					},
					Ubuntu: types.CVSS{
						V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V3Score:  3.4,
					},
				},
				References: []string{"http://foo-bar.com/baz"},
			},
		},
		{
			name: "happy path, classifications for redhat (only CVSSv3), ubuntu and nodejs with variety of scores but no vectors",
			details: map[string]types.VulnerabilityDetail{
				RedHat: {
					ID:          "CVE-2020-1234",
					CvssScoreV3: 5.6,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				Ubuntu: {
					ID:          "CVE-2020-1234",
					CvssScore:   1.2,
					CvssScoreV3: 3.4,
					Severity:    types.SeverityLow,
					SeverityV3:  types.SeverityMedium,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				NodejsSecurityWg: {
					ID:          "CVE-2020-1234",
					CvssScore:   9.1,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: types.Vulnerability{
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"redhat": 2, "ubuntu": 1, "nodejs-security-wg": 4},
				VendorVectors:  types.VendorVectors{},
				CVSS:           types.VendorCVSS{},
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
			},
		},
		{
			name: "happy path, classifications for redhat (only CVSSv3), ubuntu and nodejs with variety vectors but no scores",
			details: map[string]types.VulnerabilityDetail{
				RedHat: {
					ID:           "CVE-2020-1234",
					CvssVector:   "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
				},
				Ubuntu: {
					ID:          "CVE-2020-1234",
					Severity:    types.SeverityLow,
					SeverityV3:  types.SeverityMedium,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				NodejsSecurityWg: {
					ID:          "CVE-2020-1234",
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: types.Vulnerability{
				Severity:       types.SeverityLow.String(),
				VendorSeverity: types.VendorSeverity{"ubuntu": 1},
				VendorVectors: types.VendorVectors{
					RedHat: types.CVSSVector{
						V2: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
				},
				CVSS:        types.VendorCVSS{},
				Title:       "test vulnerability",
				Description: "a test vulnerability where vendor rates it lower than NVD",
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := New(nil).Normalize(tc.details)
			assert.Equal(t, tc.want, got)
		})
	}
}
