package vulnerability

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/aquasecurity/trivy-db/pkg/types"
)

func TestGetDetail(t *testing.T) {
	testCases := []struct {
		name                       string
		getVulnerabilityDetailFunc func(cveID string) (m map[string]types.VulnerabilityDetail, err error)
		expectedSeverity           types.Severity
		expectedVendorSeverity     types.VendorSeverity
		expectedVendorVectors      types.VendorVectors
		expectedVendorCVSS         types.VendorCVSS
		expectedTitle              string
		expectedDescription        string
		expectedRefs               []string
	}{
		{
			name: "happy path, classifications for redhat, ubuntu and nodejs with variety of scores and vectors",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{
					RedHat: {
						ID:           "CVE-2020-1234",
						CvssScore:    4.2,
						CvssVector:   "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						CvssScoreV3:  5.6,
						CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						SeverityV3:   types.SeverityCritical,
						Title:        "test vulnerability",
						Description:  "a test vulnerability where vendor rates it lower than NVD",
						References:   []string{"http://foo-bar.com/baz"},
					},
					Ubuntu: {
						ID:           "CVE-2020-1234",
						CvssScoreV3:  3.4,
						CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						Severity:     types.SeverityLow,
						SeverityV3:   types.SeverityMedium,
						Title:        "test vulnerability",
						Description:  "a test vulnerability where vendor rates it lower than NVD",
					},
					NodejsSecurityWg: {
						ID:          "CVE-2020-1234",
						CvssScore:   -1,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					RustSec: {
						ID:          "CVE-2020-1234",
						CvssScore:   9.1,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
				}, nil
			},
			expectedSeverity:       types.SeverityMedium,
			expectedVendorSeverity: types.VendorSeverity{"redhat": 4, "ubuntu": 1, "rust-advisory-db": 4},
			expectedVendorVectors: types.VendorVectors{
				RedHat: types.CVSSVector{
					V2: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
				},
				Ubuntu: types.CVSSVector{
					V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
				},
			},
			expectedVendorCVSS: types.VendorCVSS{
				RedHat: types.CVSS{
					V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					V2Score:  4.2,
					V3Score:  5.6,
				},
				Ubuntu: types.CVSS{
					V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					V3Score:  3.4,
				},
			},
			expectedTitle:       "test vulnerability",
			expectedDescription: "a test vulnerability where vendor rates it lower than NVD",
			expectedRefs:        []string{"http://foo-bar.com/baz"},
		},
		{
			name: "happy path, classifications for redhat (only CVSSv3), ubuntu and nodejs with variety of scores but no vectors",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{
					RedHat: {
						ID:          "CVE-2020-1234",
						CvssScoreV3: 5.6,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					Ubuntu: {
						ID:          "CVE-2020-1234",
						CvssScore:   1.2,
						CvssScoreV3: 3.4,
						Severity:    types.SeverityLow,
						SeverityV3:  types.SeverityMedium,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					NodejsSecurityWg: {
						ID:          "CVE-2020-1234",
						CvssScore:   9.1,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
				}, nil
			},
			expectedSeverity:       types.SeverityMedium,
			expectedVendorSeverity: types.VendorSeverity{"redhat": 2, "ubuntu": 1, "nodejs-security-wg": 4},
			expectedVendorVectors:  types.VendorVectors{},
			expectedVendorCVSS:     types.VendorCVSS{},
			expectedTitle:          "test vulnerability",
			expectedDescription:    "a test vulnerability where vendor rates it lower than NVD",
		},
		{
			name: "happy path, classifications for redhat (only CVSSv3), ubuntu and nodejs with variety vectors but no scores",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{
					RedHat: {
						ID:           "CVE-2020-1234",
						CvssVector:   "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						Title:        "test vulnerability",
						Description:  "a test vulnerability where vendor rates it lower than NVD",
					},
					Ubuntu: {
						ID:          "CVE-2020-1234",
						Severity:    types.SeverityLow,
						SeverityV3:  types.SeverityMedium,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					NodejsSecurityWg: {
						ID:          "CVE-2020-1234",
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
				}, nil
			},
			expectedSeverity:       types.SeverityLow,
			expectedVendorSeverity: types.VendorSeverity{"ubuntu": 1},
			expectedVendorVectors: types.VendorVectors{
				"redhat": types.CVSSVector{
					V2: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
				},
			},
			expectedVendorCVSS:  types.VendorCVSS{},
			expectedTitle:       "test vulnerability",
			expectedDescription: "a test vulnerability where vendor rates it lower than NVD",
		},
		{
			name: "sad path, getVulnerabilityDetailFunc returns an error",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{}, errors.New("unable to get vulnerability detail")
			},
			expectedSeverity: types.SeverityUnknown,
		},
	}

	for _, tc := range testCases {
		oldGetVulnerabilityDetailFunc := getVulnerabilityDetailFunc
		defer func() {
			getVulnerabilityDetailFunc = oldGetVulnerabilityDetailFunc
		}()
		getVulnerabilityDetailFunc = tc.getVulnerabilityDetailFunc

		gotSeverity, gotVendorSeverity, gotVendorCVSS, gotVendorVectors, gotTitle, gotDescription, gotRefs := GetDetail("CVE-2020-123")
		assert.Equal(t, tc.expectedSeverity, gotSeverity, tc.name)
		assert.Equal(t, tc.expectedVendorSeverity, gotVendorSeverity, tc.name)
		assert.Equal(t, tc.expectedVendorVectors, gotVendorVectors, tc.name)
		assert.Equal(t, tc.expectedVendorCVSS, gotVendorCVSS, tc.name)
		assert.Equal(t, tc.expectedTitle, gotTitle, tc.name)
		assert.Equal(t, tc.expectedDescription, gotDescription, tc.name)
		assert.Equal(t, tc.expectedRefs, gotRefs, tc.name)
	}

}
