package vulnerability

import (
	"testing"

	"github.com/aquasecurity/trivy/pkg/vulnsrc/vulnerability"

	"github.com/aquasecurity/trivy-db/pkg/types"

	"github.com/stretchr/testify/assert"
)

func TestGetDetail(t *testing.T) {

	oldGetVulnerabilityDetailFunc := getVulnerabilityDetailFunc
	defer func() {
		getVulnerabilityDetailFunc = oldGetVulnerabilityDetailFunc
	}()

	getVulnerabilityDetailFunc = func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
		return map[string]types.VulnerabilityDetail{
			vulnerability.RedHat: {
				ID:          "CVE-2020-1234",
				CvssScore:   4.3,
				CvssScoreV3: 5.6,
				Severity:    types.SeverityHigh,
				SeverityV3:  types.SeverityCritical,
				Title:       "test vulnerability",
				Description: "a test vulnerability where vendor rates it lower than NVD",
			},
			vulnerability.Ubuntu: {
				ID:          "CVE-2020-1234",
				CvssScore:   1.2,
				CvssScoreV3: 3.4,
				Severity:    types.SeverityLow,
				SeverityV3:  types.SeverityMedium,
				Title:       "test vulnerability",
				Description: "a test vulnerability where vendor rates it lower than NVD",
			},
			vulnerability.NodejsSecurityWg: {
				ID:          "CVE-2020-1234",
				CvssScore:   9.1,
				Title:       "test vulnerability",
				Description: "a test vulnerability where vendor rates it lower than NVD",
			},
		}, nil
	}

	gotSeverity, gotVendorSeverity, gotTitle, gotDescription, gotRefs := GetDetail("CVE-2020-123")
	assert.Equal(t, types.SeverityMedium, gotSeverity)
	assert.Equal(t, types.VendorSeverity{"redhat": 3, "ubuntu": 1, "nodejs-security-wg": 4}, gotVendorSeverity)
	assert.Equal(t, "test vulnerability", gotTitle)
	assert.Equal(t, "a test vulnerability where vendor rates it lower than NVD", gotDescription)
	assert.Empty(t, gotRefs)
}
