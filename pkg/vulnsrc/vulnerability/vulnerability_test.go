package vulnerability

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/aquasecurity/trivy-db/pkg/types"
)

func TestGetDetail(t *testing.T) {
	testCases := []struct {
		name                       string
		getVulnerabilityDetailFunc func(cveID string) (m map[string]types.VulnerabilityDetail, err error)
		want                       types.Vulnerability
	}{
		{
			name: "happy path",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{
					Nvd: {
						CvssScore:    4.2,
						CvssVector:   "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						CvssScoreV3:  5.6,
						CvssVectorV3: "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						SeverityV3:   types.SeverityMedium,
						CweIDs:       []string{"CWE-125", "CWE-200"},
					},
					RedHat: {
						CvssScoreV3:  6.7,
						CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						SeverityV3:   types.SeverityHigh,
						Title:        "test vulnerability",
						Description:  "a test vulnerability where vendor rates it lower than NVD",
						References:   []string{"http://foo-bar.com/baz"},
					},
				}, nil
			},
			want: types.Vulnerability{
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"nvd": 2, "redhat": 3},
				VendorVectors: types.VendorVectors{
					Nvd: types.CVSSVector{
						V2: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3: "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
					RedHat: types.CVSSVector{
						V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
				},
				CVSS: types.VendorCVSS{
					Nvd: types.CVSS{
						V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3Vector: "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V2Score:  4.2,
						V3Score:  5.6,
					},
					RedHat: types.CVSS{
						V2Vector: "",
						V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V2Score:  0,
						V3Score:  6.7,
					},
				},
				CweIDs:     []string{"CWE-125", "CWE-200"},
				References: []string{"http://foo-bar.com/baz"},
			},
		},
		{
			name: "happy path, classifications for redhat, ubuntu and nodejs with variety of scores and vectors",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{
					RedHat: {
						ID:           "CVE-2020-1234",
						CvssScore:    4.2,
						CvssVector:   "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						CvssScoreV3:  5.6,
						CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						SeverityV3:   types.SeverityCritical,
						Title:        "test vulnerability",
						Description:  "a test vulnerability where vendor rates it lower than NVD",
						References:   []string{"http://foo-bar.com/baz"},
					},
					Ubuntu: {
						ID:           "CVE-2020-1234",
						CvssScoreV3:  3.4,
						CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						Severity:     types.SeverityLow,
						SeverityV3:   types.SeverityMedium,
						Title:        "test vulnerability",
						Description:  "a test vulnerability where vendor rates it lower than NVD",
					},
					NodejsSecurityWg: {
						ID:          "CVE-2020-1234",
						CvssScore:   -1,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					RustSec: {
						ID:          "CVE-2020-1234",
						CvssScore:   9.1,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
				}, nil
			},
			want: types.Vulnerability{
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"redhat": 4, "ubuntu": 1, "rust-advisory-db": 4},
				VendorVectors: types.VendorVectors{
					RedHat: types.CVSSVector{
						V2: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
					Ubuntu: types.CVSSVector{
						V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
				},
				CVSS: types.VendorCVSS{
					RedHat: types.CVSS{
						V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V2Score:  4.2,
						V3Score:  5.6,
					},
					Ubuntu: types.CVSS{
						V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V3Score:  3.4,
					},
				},
				References: []string{"http://foo-bar.com/baz"},
			},
		},
		{
			name: "happy path, classifications for redhat (only CVSSv3), ubuntu and nodejs with variety of scores but no vectors",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{
					RedHat: {
						ID:          "CVE-2020-1234",
						CvssScoreV3: 5.6,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					Ubuntu: {
						ID:          "CVE-2020-1234",
						CvssScore:   1.2,
						CvssScoreV3: 3.4,
						Severity:    types.SeverityLow,
						SeverityV3:  types.SeverityMedium,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					NodejsSecurityWg: {
						ID:          "CVE-2020-1234",
						CvssScore:   9.1,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
				}, nil
			},
			want: types.Vulnerability{
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"redhat": 2, "ubuntu": 1, "nodejs-security-wg": 4},
				VendorVectors:  types.VendorVectors{},
				CVSS:           types.VendorCVSS{},
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
			},
		},
		{
			name: "happy path, classifications for redhat (only CVSSv3), ubuntu and nodejs with variety vectors but no scores",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{
					RedHat: {
						ID:           "CVE-2020-1234",
						CvssVector:   "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						Title:        "test vulnerability",
						Description:  "a test vulnerability where vendor rates it lower than NVD",
					},
					Ubuntu: {
						ID:          "CVE-2020-1234",
						Severity:    types.SeverityLow,
						SeverityV3:  types.SeverityMedium,
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
					NodejsSecurityWg: {
						ID:          "CVE-2020-1234",
						Title:       "test vulnerability",
						Description: "a test vulnerability where vendor rates it lower than NVD",
					},
				}, nil
			},
			want: types.Vulnerability{
				Severity:       types.SeverityLow.String(),
				VendorSeverity: types.VendorSeverity{"ubuntu": 1},
				VendorVectors: types.VendorVectors{
					RedHat: types.CVSSVector{
						V2: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					},
				},
				CVSS:        types.VendorCVSS{},
				Title:       "test vulnerability",
				Description: "a test vulnerability where vendor rates it lower than NVD",
			},
		},
		{
			name: "sad path, getVulnerabilityDetailFunc returns an error",
			getVulnerabilityDetailFunc: func(cveID string) (m map[string]types.VulnerabilityDetail, err error) {
				return map[string]types.VulnerabilityDetail{}, errors.New("unable to get vulnerability detail")
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			oldGetVulnerabilityDetailFunc := getVulnerabilityDetailFunc
			defer func() {
				getVulnerabilityDetailFunc = oldGetVulnerabilityDetailFunc
			}()
			getVulnerabilityDetailFunc = tc.getVulnerabilityDetailFunc

			got := GetDetail("CVE-2020-123")
			assert.Equal(t, tc.want, got)
		})
	}
}
